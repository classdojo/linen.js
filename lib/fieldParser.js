// Generated by CoffeeScript 1.6.2
(function() {
  var Field, Fields, Parser, toarray, type, verify;

  Field = require("./field");

  Fields = require("./fields");

  type = require("type-component");

  verify = require("verify")();

  toarray = require("toarray");

  /*
   parses a schema definition
  */


  Parser = (function() {
    /*
    */
    function Parser() {}

    /*
    */


    Parser.prototype.parse = function(schema, definition) {
      var fields;

      fields = new Fields(schema);
      this._parseFields(definition, fields, []);
      return fields;
    };

    /*
    */


    Parser.prototype._parseFields = function(options, fields, path) {
      var fops, key, opName, ops, t, test, _results;

      ops = {};
      if ((t = type(options)) === "string") {
        ops.$type = options;
      } else if (t === "array") {
        ops = options[0];
        ops.$multi = true;
      } else {
        ops = options;
      }
      if (!this._hasOps(ops)) {
        _results = [];
        for (key in ops) {
          _results.push(this._parseFields(ops[key], fields, path.concat(key)));
        }
        return _results;
      } else {
        test = this._getValueTester(ops);
        fops = {};
        for (opName in ops) {
          fops[opName.substr(1)] = ops[opName];
        }
        fops.test = test;
        fops.property = path.join(".");
        return fields.add(new Field(fields, fops));
      }
    };

    /*
    */


    Parser.prototype._getValueTester = function(ops) {
      var k, key, tester,
        _this = this;

      if (ops.$test) {
        return ops.$test;
      }
      if (ops.$type) {
        ops.$is = ops.$type;
        delete ops.$type;
      }
      tester = verify.tester();
      for (key in ops) {
        k = key.substr(1);
        if (!!tester[k]) {
          tester[k].apply(tester, toarray(ops[key]));
        }
      }
      return function(value) {
        return tester.test(value);
      };
    };

    /*
    */


    Parser.prototype._hasOps = function(options) {
      var key;

      for (key in options) {
        if (key.substr(0, 1) === "$") {
          return true;
        }
      }
      return false;
    };

    return Parser;

  })();

  module.exports = new Parser();

}).call(this);
