// Generated by CoffeeScript 1.6.2
(function() {
  var Collection, ModelPlugin, cstep, dref, outcome,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Collection = require("bindable").Collection;

  cstep = require("cstep");

  dref = require("dref");

  outcome = require("outcome");

  ModelPlugin = (function() {
    /*
    */
    function ModelPlugin(linen, modelBuilder) {
      this.linen = linen;
      this.modelBuilder = modelBuilder;
      this._modelBuilderCreateCollection = __bind(this._modelBuilderCreateCollection, this);
      this.schema = modelBuilder.schema;
      this._setup();
    }

    /*
    */


    ModelPlugin.prototype.createItem = function(path, data) {
      var model;

      if (data == null) {
        data = {};
      }
      data.requestOptions = {
        path: path
      };
      model = new this.modelClass(data);
      model.fetch();
      return model;
    };

    /*
    */


    ModelPlugin.prototype.createCollection = function(path, options) {
      var collection, self,
        _this = this;

      if (options == null) {
        options = {};
      }
      collection = new Collection();
      self = this;
      collection.requestOptions = {
        path: path,
        params: options.params || {},
        query: options.query || {}
      };
      collection.transform().map(function(itemOrId) {
        var item;

        if (typeof itemOrId === "object") {
          item = itemOrId;
        } else {
          item = {
            _id: itemOrId
          };
          collection.__fetchRef = true;
        }
        return item;
      });
      collection.transform().postMap(function(item) {
        item.requestOptions = {
          path: path,
          itemId: item._id
        };
        return item;
      });
      collection.save = function(next) {
        return async.forEach(this.source(), (function(item, next) {
          return item.save(next);
        }), next);
      };
      collection.fetch = cstep(function(callback) {
        if (this.length()) {
          if (this.__fetchRef) {
            return this._fetchRef(callback);
          }
        } else {
          return this._fetchSub(callbac);
        }
      });
      collection._fetchRef = function(next) {
        return async.forEach(this.source(), (function(item, next) {
          return item.fetch(next);
        }), next);
      };
      collection._noFetch = function(callback) {};
      collection._fetchSub = function(callback) {
        return self._fetch({
          method: "GET",
          item: this
        }, callback);
      };
      return collection;
    };

    /*
    */


    ModelPlugin.prototype._modelBuilderCreateCollection = function(item, definition) {
      var collectionName, path, schemaName;

      schemaName = definition.options.$ref;
      collectionName = definition.key;
      path = definition.options.$route || [item.requestOptions.path, definition.key].join(".");
      console.log(path);
      return this.createCollection(path);
    };

    /*
    */


    ModelPlugin.prototype._fetch = function(options, callback) {
      return this.linen._request(options, callback);
    };

    /*
    */


    ModelPlugin.prototype._setup = function() {
      var modelBuilder, name, oldInitData, oldSet, self;

      self = this;
      modelBuilder = this.modelBuilder = this.schema.modelBuilder;
      modelBuilder.createCollection = this._modelBuilderCreateCollection;
      this.modelClass = modelBuilder.getClass();
      name = modelBuilder.name;
      oldInitData = this.modelClass.prototype._initData;
      modelBuilder.methods._initData = function(data) {
        if (typeof data === "string") {
          data = {
            _id: data
          };
          this.requestOptions = {};
        } else {
          data = data;
          this.requestOptions = data.requestOptions;
          delete data.requestOptions;
        }
        return oldInitData.apply(this, arguments);
      };
      oldSet = this.modelClass.prototype._set;
      modelBuilder.methods._set = function(key, value) {
        oldSet.apply(this, arguments);
        if (!this._update) {
          this._update = {};
        }
        return dref.set(this._update, key, value);
      };
      modelBuilder.methods.hydrate = function(key, value) {
        this.set.apply(this, arguments);
        this._update = {};
        return this;
      };
      modelBuilder.methods.fetch = function(next) {
        var _this = this;

        if (next == null) {
          next = (function() {});
        }
        this.once("loaded", next);
        if (this._loading) {
          return;
        }
        this._loading = true;
        return this._fetch(outcome.e(next).s(function(result) {
          return _this._loading = false;
        }));
      };
      modelBuilder.methods._fetch = cstep(function(next) {
        var _this = this;

        this.requestOptions[name] = this.get("_id");
        return self._fetch({
          method: "GET",
          item: this
        }, outcome.e(next).s(function(result) {
          _this.hydrate(result);
          _this.emit("loaded");
          return next();
        }));
      });
      modelBuilder.methods.isNew = function() {
        return !get("_id");
      };
      modelBuilder.pre("save", cstep(function(next) {
        return this.validate(next);
      }));
      modelBuilder.pre("save", function(next) {
        if (this.isNew()) {
          return self._fetch({
            method: "POST",
            item: this,
            data: this._update
          }, next);
        } else if (_.keys(this._update).length) {
          return self._fetch({
            method: "PUT",
            item: this,
            data: this._update
          }, next);
        }
      });
      return modelBuilder.pre("remove", cstep(function(next) {
        if (this.isNew()) {
          return next(new Error("cannot remove a new item"));
        }
        return self._fetch({
          method: "DELETE",
          item: this
        }, next);
      }));
    };

    return ModelPlugin;

  })();

  exports.plugin = function(linen, modelBuilder) {
    var plugin;

    plugin = new ModelPlugin(linen, modelBuilder);
    modelBuilder.schema.linenBuilder = plugin;
    modelBuilder.linenBuilder = plugin;
    return plugin;
  };

}).call(this);
