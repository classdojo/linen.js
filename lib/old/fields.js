// Generated by CoffeeScript 1.6.2
(function() {
  var Field, Fields, dref, toarray;

  Field = require("./field");

  toarray = require("toarray");

  dref = require("dref");

  Fields = (function() {
    /*
    */
    function Fields(schema, parent) {
      this.schema = schema;
      this.parent = parent;
      this._fields = {};
    }

    /*
     if anything is returned, then it's an error
    */


    Fields.prototype.validate = function(model, keys) {
      var errors, fieldName;

      if (keys == null) {
        keys = [];
      }
      errors = [];
      if (!keys) {
        keys = Object.keys(this._fields);
      }
      for (fieldName in this._fields) {
        errors = errors.concat(toarray(this._fields[fieldName].validate(model)));
      }
      if (errors.length) {
        return errors.shift();
      } else {
        return void 0;
      }
    };

    /*
    */


    Fields.prototype.get = function(name) {
      return this._fields[name];
    };

    /*
    */


    Fields.prototype.map = function(data) {
      var d, field, key, v;

      d = JSON.parse(JSON.stringify(data));
      for (key in this._fields) {
        field = this.get(key);
        if (!field) {
          continue;
        }
        v = field.map(data[key]);
        if (v == null) {
          continue;
        }
        d[key] = v;
      }
      return d;
    };

    /*
    */


    Fields.prototype.addFields = function(options) {
      var fieldName, _results;

      _results = [];
      for (fieldName in options) {
        _results.push(this._fields[fieldName] = new Field(fieldName, options[fieldName], this.schema, this.parent));
      }
      return _results;
    };

    return Fields;

  })();

  Field.Fields = Fields;

  module.exports = Fields;

}).call(this);
