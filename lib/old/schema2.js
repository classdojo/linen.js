// Generated by CoffeeScript 1.6.2
/*

schema = 
  route: "/classrooms"
  fields: 
    name: "string"
    students: [
      $ref: "student"
      $fetch:
        route: ["@route", ":_id/students"]
    ]
    archived:
      $type: "string"
      $fetch: 
        put: [
          {
            test: (value) -> value is true
            route: ["@route", ":_id/archive"]
          },
          {
            test: 
              method: (value) -> value is false
            route: ["@route", ":_id/unarchive"]
          }
        ]

classroomSchema = linen.schema "classroom", schema

# /classrooms/someId
classroom = linen.model("classroom", "someId")

# /classrooms/someId/students
classroom.get("students")

# put /classrooms/somId/archive
classroom.set("archived", true)
*/


(function() {
  var Collection, Fields, Model, Schema, bindable, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Fields = require("./fields");

  bindable = require("bindable");

  Model = require("./model");

  Collection = require("./collection");

  type = require("type-component");

  Schema = (function(_super) {
    __extends(Schema, _super);

    /*
    */


    Schema.prototype.__isSchema = true;

    /*
    */


    function Schema(linen, options) {
      this.linen = linen;
      if (options == null) {
        options = {};
      }
      this.name = options.name;
      this.route = options.route;
      this._setFields(options.fields || {});
      this._addDefaultFields();
    }

    /*
    */


    Schema.prototype.save = function(model, next) {
      return this.validate(model, function(err) {
        var changed;

        if (err != null) {
          return next(err);
        }
        return changed = model.flushChanged();
      });
    };

    /*
    */


    Schema.prototype.validate = function(model, next) {
      return next(this._fields.validate(model));
    };

    /*
    */


    Schema.prototype.model = function(data) {
      var d;

      d = {};
      if (type(data) === "string") {
        d._id = data;
      } else {
        d = data || {};
      }
      return new Model(this, this._fields.map(d));
    };

    /*
    */


    Schema.prototype.field = function(name) {
      return this._fields.get(name);
    };

    /*
    */


    Schema.prototype.collection = function() {};

    /*
    */


    Schema.prototype._setFields = function(options) {
      this._fields = new Fields(this);
      return this._fields.addFields(options);
    };

    /*
    */


    Schema.prototype._addDefaultFields = function() {
      return this._fields.addFields({
        _id: "string"
      });
    };

    return Schema;

  })(bindable.Object);

  module.exports = Schema;

}).call(this);
