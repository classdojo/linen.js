// Generated by CoffeeScript 1.6.2
(function() {
  var FnVirtual,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ({
    _findFetch: function(schema) {
      var p;

      p = schema;
      while (p && !p.options.fetch) {
        p = p.parent;
      }
      return p != null ? p.options.fetch : void 0;
    }
  });

  FnVirtual = (function(_super) {
    __extends(FnVirtual, _super);

    /*
    */


    function FnVirtual(field) {
      var _ref;

      FnVirtual.__super__.constructor.call(this, field);
      this._fetcher = this._findFetcher(field);
      this._fetch = (_ref = this._fetcher) != null ? _ref.options.fetch : void 0;
    }

    /*
    */


    FnVirtual.prototype.fetch = function(model, next) {
      var _this = this;

      if (model.isNew() || !this._fetch) {
        return next();
      }
      return this._fetch.call(model, function(err, result) {
        var v;

        if (err != null) {
          return next(err);
        }
        v = _this._fetcher.map(result);
        if (!_this._fetcher.path) {
          model.reset(v);
        } else {
          model.set(_this._fetcher.path, v);
        }
        return next();
      });
    };

    /*
     finds explicit $fetch fn
    */


    FnVirtual.prototype._findFetcher = function(field) {
      var p;

      p = field;
      while (p && !p.options.fetch) {
        p = p.parent;
      }
      return p;
    };

    return FnVirtual;

  })(require("./base"));

  module.exports = FnVirtual;

}).call(this);
