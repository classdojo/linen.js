// Generated by CoffeeScript 1.6.2
(function() {
  var async, asyngleton, bindable, outcome,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  async = require("async");

  outcome = require("outcome");

  asyngleton = require("asyngleton");

  module.exports = (function(_super) {
    __extends(_Class, _super);

    /*
    */


    function _Class(collectionName, modelBuilder, options) {
      this.collectionName = collectionName;
      this.modelBuilder = modelBuilder;
      this.options = options != null ? options : {};
      _Class.__super__.constructor.call(this);
      this.options.path = this.route.path || this.collectionName;
      this.options.collectionName = this.collectionName;
      this._modelClass = options.modelClass;
      this._isVirtual = options.virtual !== false;
      this._isStatic = options["static"];
      this._initCollection();
    }

    /*
    */


    _Class.prototype.route = function() {
      return this.options;
    };

    /*
    */


    _Class.prototype.item = function(data) {
      var model;

      if (typeof data === "string") {
        data = {
          _id: data
        };
      } else {
        data = data;
      }
      model = new this._modelClass(data);
      model.route(this.options);
      model.parent = this;
      return model;
    };

    /*
    */


    _Class.prototype._initCollection = function() {
      return this._initTransformations();
    };

    /*
    */


    _Class.prototype._initTransformations = function() {
      var _this = this;

      this.transform().cast(this._modelClass).map(function(itemOrId) {
        var item;

        if (typeof itemOrId === "object") {
          return item = itemOrId;
        } else {
          return item = {
            _id: itemOrId
          };
        }
      });
      return this.transform().postMap(function(item) {
        item.route(_this.options);
        return item;
      });
    };

    /*
    */


    _Class.prototype.reset = function(source) {
      if (source.__isCollection) {
        source = source.source();
      }
      if (!this._isStatic && typeof source[0] === "string") {
        source = [];
      }
      return _Class.__super__.reset.call(this, source);
    };

    /*
     override bind so that fetch is called each time
    */


    _Class.prototype.bind = function(to) {
      this.fetch();
      if (!arguments.length) {
        return _Class.__super__.bind.call(this);
      } else {
        return _Class.__super__.bind.call(this, to);
      }
    };

    /*
    */


    _Class.prototype.save = function(next) {
      return async.forEach(this.source(), (function(item, next) {
        return item.save(next);
      }), next);
    };

    /*
    */


    _Class.prototype.fetch = asyngleton(true, function(callback) {
      if (this._isStatic) {
        return callback();
      }
      if (!this._isVirtual) {
        return this._fetchReference(callback);
      } else {
        return this._fetchVirtual(callback);
      }
    });

    /*
    */


    _Class.prototype._fetchReference = function(next) {
      var _this = this;

      return async.forEach(this._fetchSource, (function(_id, next) {
        var i, item;

        if (~(i = _this.indexOf({
          _id: _id
        }))) {
          item = _this.at(i);
        } else {
          item = _this._transform({
            _id: _id
          });
        }
        return item.fetch(outcome.e(next).s(function() {
          if (!~i) {
            _this.push(item);
          }
          return next();
        }));
      }), next);
    };

    /*
    */


    _Class.prototype._fetchVirtual = function(callback) {
      var request,
        _this = this;

      request = {
        method: "GET",
        item: this
      };
      return this.modelBuilder._fetch(request, outcome.e(callback).s(function(source) {
        _this.reset(source);
        return callback();
      }));
    };

    return _Class;

  })(bindable.Collection);

}).call(this);
