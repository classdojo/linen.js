// Generated by CoffeeScript 1.6.2
(function() {
  var Collection, async, asyngleton, bindable, outcome, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  async = require("async");

  outcome = require("outcome");

  asyngleton = require("asyngleton");

  type = require("type-component");

  module.exports = Collection = (function(_super) {
    __extends(Collection, _super);

    /*
    */


    function Collection(collectionName, modelBuilder, options) {
      this.collectionName = collectionName;
      this.modelBuilder = modelBuilder;
      this.options = options != null ? options : {};
      Collection.__super__.constructor.call(this);
      this.options.path = this.route.path || this.collectionName;
      this.options.collectionName = this.collectionName;
      this._modelClass = options.modelClass;
      this._modelBuilder = this._modelClass.builder;
      this._isVirtual = options.virtual !== false;
      this._isStatic = options["static"];
      this._initCollection();
      this.on("insert", this._persistInsert);
      this.on("remove", this._persistRemove);
      this.on("reset", this._onReset);
    }

    /*
    */


    Collection.prototype.route = function() {
      return this.options;
    };

    /*
    */


    Collection.prototype.item = function(data) {
      var Item;

      Item = this.getModelClass();
      return new Item(data);
    };

    /*
    */


    Collection.prototype.getModelClass = function() {
      var self, _ref;

      if (this._class) {
        return this._class;
      }
      self = this;
      this._class = (function(_super1) {
        __extends(_Class, _super1);

        function _Class() {
          _ref = _Class.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        /*
        */


        _Class.prototype._initData = function(data) {
          _Class.__super__._initData.call(this, data);
          this.route(self.options);
          return this.parent = self;
        };

        return _Class;

      })(this._modelClass);
      this._class.collection = this;
      return this._class;
    };

    /*
    */


    Collection.prototype._initCollection = function() {
      return this._initTransformations();
    };

    /*
    */


    Collection.prototype._initTransformations = function() {
      var _this = this;

      return this.transform().map(this._modelBuilder._castRefClass(this.getModelClass())).postMap(function(item) {
        item.route(_this.options);
        return item;
      });
    };

    /*
    */


    Collection.prototype.clear = function() {
      var _results;

      _results = [];
      while (this.length()) {
        _results.push(this.shift());
      }
      return _results;
    };

    /*
    */


    Collection.prototype.reset = function(source) {
      var result;

      this._resetting = true;
      if (source.__isCollection) {
        source = source.source();
      }
      if ((!this._isStatic && (type(source[0]) === "string")) || !(type(source) === "array")) {
        source = [];
      } else if (this._isVirtual && !this._fetching) {
        source = [];
      }
      result = Collection.__super__.reset.call(this, source);
      this._resetting = false;
      return result;
    };

    /*
    */


    Collection.prototype.pushNoPersist = function(item) {
      this._resetting = true;
      this.push(item);
      return this._resetting = false;
    };

    /*
     override bind so that fetch is called each time
    */


    Collection.prototype.bind = function(to) {
      this.fetch();
      return Collection.__super__.bind.apply(this, arguments);
    };

    /*
    */


    Collection.prototype.save = function(next) {
      return async.forEach(this.source(), (function(item, next) {
        return item.save(next);
      }), next);
    };

    /*
    */


    Collection.prototype.fetch = asyngleton(5, function(callback) {
      this._fetching = [];
      if (this._isStatic || (this.parent && !this.parent.__isCollection && !this.parent.data._id)) {
        return callback();
      }
      if (!this._isVirtual) {
        return this._fetchReference(callback);
      } else {
        return this._fetchVirtual(callback);
      }
    });

    /*
    */


    Collection.prototype._fetchReference = function(next) {
      var _this = this;

      return async.forEach(this._fetchSource, (function(_id, next) {
        var i, item;

        if (~(i = _this.indexOf({
          _id: _id
        }))) {
          item = _this.at(i);
        } else {
          item = _this._transform({
            _id: _id
          });
        }
        return item.fetch(outcome.e(next).s(function() {
          if (!~i) {
            _this.push(item);
          }
          return next();
        }));
      }), next);
    };

    /*
    */


    Collection.prototype._fetchVirtual = function(callback) {
      var request,
        _this = this;

      request = {
        method: "GET"
      };
      return this._request(request, outcome.e(callback).s(function(source) {
        _this.reset(source);
        return callback();
      }));
    };

    /*
    */


    Collection.prototype._request = function(request, callback) {
      if (callback == null) {
        callback = (function() {});
      }
      request.collection = this;
      return this.modelBuilder.linen.resource.request(request, callback);
    };

    /*
    */


    Collection.prototype._persistRemove = function(item) {
      var request;

      if (this._resetting || item.removed) {
        return;
      }
      request = {
        method: "DELETE",
        item: item
      };
      return this._request(request);
    };

    /*
    */


    Collection.prototype._onReset = function(items) {
      var item, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(this._persistInsert(item));
      }
      return _results;
    };

    /*
    */


    Collection.prototype._persistInsert = function(item) {
      var request,
        _this = this;

      item.once("remove", function() {
        return _this.splice(_this.indexOf(item), 1);
      });
      if (this._resetting) {
        return;
      }
      request = {
        method: "POST",
        body: item
      };
      return this._request(request);
    };

    return Collection;

  })(bindable.Collection);

}).call(this);
