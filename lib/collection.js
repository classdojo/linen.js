// Generated by CoffeeScript 1.6.2
(function() {
  var Collection, Model, bindable, flatstack, memoize, payload, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  payload = require("./payload");

  _ = require("underscore");

  Model = require("./model");

  flatstack = require("flatstack");

  memoize = require("./memoize");

  Collection = (function(_super) {
    __extends(Collection, _super);

    /*
    */


    Collection.prototype.__isCollection = true;

    /*
    */


    function Collection(field) {
      var _this = this;

      this.field = field;
      Collection.__super__.constructor.call(this);
      this.linen = field.linen;
      this.transform().map(function(model) {
        model = _this._map(model);
        model.owner = _this.owner;
        _this._watchRemove(model);
        return model;
      });
      this.on({
        insert: this._persistInsert,
        remove: this._persistRemove,
        reset: this._persistReset
      });
      this.fetch = memoize((function(next) {
        return _this._fetch(next);
      }), {
        maxAge: 1000 * 5
      });
    }

    /*
    */


    Collection.prototype._map = function(data) {
      if (data != null ? data.__isModel : void 0) {
        return data;
      } else {
        return this.linen.model(this.field.options.ref, data);
      }
    };

    /*
    */


    Collection.prototype.model = function(data) {
      var model,
        _this = this;

      model = this._map(data);
      model.collection = this;
      model.owner = this.owner;
      model.once("save", function(err) {
        if (err != null) {
          return;
        }
        _this._ignorePersist = true;
        _this.push(model);
        return _this._ignorePersist = false;
      });
      this._watchRemove(model);
      return model;
    };

    /*
    */


    Collection.prototype.clear = function() {
      var model, source, _i, _len, _results;

      source = this.source().concat();
      _results = [];
      for (_i = 0, _len = source.length; _i < _len; _i++) {
        model = source[_i];
        _results.push(model.remove());
      }
      return _results;
    };

    /*
    */


    Collection.prototype._watchRemove = function(model) {
      var _this = this;

      return model.once("remove", function(err) {
        var i;

        _this._ignorePersist = true;
        i = _this.indexOf(model);
        if (~i) {
          _this.splice(i, 1);
        }
        return _this._ignorePersist = false;
      });
    };

    /*
    */


    Collection.prototype.hasChanged = function() {
      var item, _i, _len, _ref;

      _ref = this.source();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.hasChanged()) {
          return true;
        }
      }
      return false;
    };

    /*
    */


    Collection.prototype._fetch = function(next) {
      var _this = this;

      if (next == null) {
        next = function() {};
      }
      if (!this.field.isVirtual()) {
        return next();
      }
      this.field.fetch(payload.collection(this).method("GET").data, function(err, models) {
        if (err != null) {
          return next(err);
        }
        _this._reset(models || _this.source());
        return next();
      });
      return this;
    };

    /*
    */


    Collection.prototype.bind = function(options) {
      var binding;

      binding = Collection.__super__.bind.apply(this, arguments);
      this.fetch();
      return binding;
    };

    /*
    */


    Collection.prototype.save = function() {};

    /*
    */


    Collection.prototype._reset = function(src) {
      var esrc, existingItem, found, i, item, newItem, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;

      this._ignorePersist = true;
      src = src;
      esrc = this.source().concat();
      for (i = _i = 0, _len = esrc.length; _i < _len; i = ++_i) {
        existingItem = esrc[i];
        found = false;
        for (_j = 0, _len1 = src.length; _j < _len1; _j++) {
          newItem = src[_j];
          if (existingItem.get("_id") === newItem._id) {
            found = true;
            break;
          }
        }
        if (!found) {
          this.splice(i, 1);
        }
      }
      for (_k = 0, _len2 = esrc.length; _k < _len2; _k++) {
        existingItem = esrc[_k];
        for (i = _l = 0, _len3 = src.length; _l < _len3; i = ++_l) {
          newItem = src[i];
          if (existingItem.get("_id") === newItem._id) {
            existingItem.set(newItem);
            src.splice(i, 1);
            break;
          }
        }
      }
      for (_m = 0, _len4 = src.length; _m < _len4; _m++) {
        item = src[_m];
        this.push(item);
      }
      return this._ignorePersist = false;
    };

    /*
    */


    Collection.prototype.toJSON = function() {
      var model, models, _i, _len, _ref;

      models = [];
      _ref = this.source();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        models.push(model.push(model.__isModel ? model.toJSON() : model));
      }
      return models;
    };

    /*
    */


    Collection.prototype._persistInsert = function(model) {
      if (this._ignorePersist || this.owner.isNew()) {
        return;
      }
      return this.field.fetch(payload.collection(this).target(model).method("POST").data, function() {});
    };

    /*
    */


    Collection.prototype._persistRemove = function(model) {
      if (this._ignorePersist || this.owner.isNew()) {
        return;
      }
      if (model.isNew()) {
        return;
      }
      return this.field.fetch(payload.collection(this).target(model).method("DELETE").data, function() {});
    };

    /*
    */


    Collection.prototype._persistReset = function() {
      throw new Error("cannot persist reset (not implemented)");
    };

    return Collection;

  })(bindable.Collection);

  module.exports = Collection;

}).call(this);
