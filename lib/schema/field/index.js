// Generated by CoffeeScript 1.6.2
(function() {
  var Field, normalize;

  normalize = require("./normalize");

  /*
   describes the skeleton of what the capabilities are of a particular
   model - doesn't actually do anything except store options
  */


  Field = (function() {
    /*
    */
    function Field(options) {
      this.options = options;
      this.name = options.name;
      this.path = (options.path || []).join(".");
      this.parent = this.options.parent;
      this._setFields(options.fields);
    }

    /*
     gets the field based on the given path - passed to another method
     that's a bit more
    */


    Field.prototype.getField = function(path, closest) {
      if (closest == null) {
        closest = false;
      }
      return this._getField(path.split("."), 0, closest);
    };

    /*
      returns all fields
    */


    Field.prototype.flatten = function() {
      return this._flatten([]);
    };

    /*
    */


    Field.prototype._flatten = function(fields) {
      var field, _i, _len, _ref;

      fields.push(this);
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        field._flatten(fields);
      }
      return fields;
    };

    /*
    */


    Field.prototype._getField = function(path, index, closest) {
      var field, name;

      if (index === path.length) {
        return this;
      }
      name = path[index];
      field = this._fieldsByName[name];
      if (!field) {
        if (closest) {
          return this;
        } else {
          return void 0;
        }
      }
      return field._getField(path, index + 1, closest);
    };

    /*
    */


    Field.prototype._setFields = function(fields) {
      var fieldName, _results;

      this.fields = [];
      this._fieldsByName = {};
      _results = [];
      for (fieldName in fields) {
        _results.push(this._addField(fieldName, fields[fieldName]));
      }
      return _results;
    };

    /*
     adds a sub field to this field
    */


    Field.prototype._addField = function(fieldName, options) {
      var field;

      options.parent = this;
      options.path = (this.options.path || []).concat(fieldName);
      options.name = fieldName;
      this.fields.push(field = new Field(options));
      return this._fieldsByName[field.name] = field;
    };

    return Field;

  })();

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    return new Field(normalize(options));
  };

}).call(this);
