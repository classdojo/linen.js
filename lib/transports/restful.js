// Generated by CoffeeScript 1.6.2
(function() {
  var outcome, type;

  outcome = require("outcome");

  type = require("type-component");

  module.exports = function(options) {
    var defaultHost, fixPath, self, _ref;

    if (options == null) {
      options = {};
    }
    fixPath = function(path) {
      return path.replace(/\/+/g, "/");
    };
    return self = {
      /*
      */

      host: defaultHost = ((_ref = options.hosts) != null ? _ref.main : void 0) || ("" + window.location.protocol + "//" + window.location.host),
      /*
       joins two paths together
      */

      hosts: options.hosts,
      path: function() {
        var part, path, _i, _len;

        path = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          part = arguments[_i];
          if (part) {
            path.push(part);
          }
        }
        return path.join("/");
      },
      /*
      */

      get: function(options, next) {
        options.method = "GET";
        return self.request(options, next);
      },
      /*
      */

      post: function(options, next) {
        options.method = "POST";
        return self.request(options, next);
      },
      /*
      */

      put: function(options, next) {
        options.method = "PUT";
        return self.request(options, next);
      },
      /*
      */

      del: function(options, next) {
        options.method = "DELETE";
        return self.request(options, next);
      },
      /*
      */

      request: function(options, next) {
        var fet, host, path;

        host = options.host || self.host;
        path = fixPath("/" + options.path);
        fet = options.method + " " + host + path;
        console.log(fet);
        return $.ajax({
          url: host + path,
          type: options.method,
          dataType: "json",
          data: /GET/.test(options.method) ? void 0 : JSON.parse(JSON.stringify(options.data || {})),
          error: function(response) {
            if (response.responseJSON) {
              return next(response.responseJSON);
            }
            return next(comerr.fromCode(response.status));
          },
          success: function(content) {
            var result;

            if (content.error) {
              return next(content.error);
            }
            result = content.data || content;
            return next(null, result);
          }
        });
      },
      /*
       create a router to this api transport
      */

      route: function(options) {
        var fetch, host;

        if (options == null) {
          options = {};
        }
        host = options.host || defaultHost;
        if (!options.path) {
          options.path = function(payload) {
            if (!payload.model.schema.options.path) {
              return;
            }
            return payload.model.schema.options.path(payload);
          };
        }
        if (!options.map) {
          options.map = function(data) {
            return data;
          };
        }
        fetch = function(payload, next) {
          var mapModel, owner, path, _ref1;

          path = type(options.path) === "function" ? options.path.call(options, payload) : options.path;
          if (options.inherit !== false) {
            owner = payload.field ? payload.model : payload.model.owner;
            while (owner && ((_ref1 = owner.schema.options.fetch) != null ? _ref1.path : void 0)) {
              path = owner.schema.options.fetch.path({
                model: owner
              }) + "/" + path;
              if (owner.schema.options.fetch.inherit === false) {
                break;
              }
              owner = owner.owner;
            }
          }
          path = fixPath(path);
          mapModel = function(data) {
            return options.map.call(payload.model, data);
          };
          return self.request({
            host: host,
            path: path,
            data: payload.data,
            method: payload.method
          }, outcome.e(next).s(function(result) {
            var map,
              _this = this;

            map = function(data) {
              return options.map.call(payload.model, data);
            };
            if (type(result) === "array") {
              result = result.map(map);
            } else {
              result = map(result);
            }
            return next(null, result);
          }));
        };
        fetch.path = options.path;
        fetch.inherit = options.inherit;
        return fetch;
      }
    };
  };

}).call(this);
