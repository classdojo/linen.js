// Generated by CoffeeScript 1.6.2
(function() {
  var Collection, Field, Model, comerr, type;

  Collection = require("./collection");

  Model = require("./model");

  comerr = require("comerr");

  type = require("type-component");

  Field = (function() {
    /*
    */
    function Field(fields, options) {
      this.fields = fields;
      this.options = options;
      this.schema = this.fields.schema;
      this.linen = this.schema.linen;
      this.property = options.property;
      this.bind = options.bind;
    }

    /*
     virtual might be remove, or local
    */


    Field.prototype.isVirtual = function() {
      return this._refVirtual() || !!this.options.fetch || !!this.options.get || !!this.options.set;
    };

    /*
    */


    Field.prototype._refVirtual = function() {
      if (!this.options.ref) {
        return false;
      }
      return this.linen.schemas.get(this.options.ref).isVirtual();
    };

    /*
    */


    Field.prototype.validate = function(model) {
      var error, v, value, values, _i, _len;

      value = model.get(this.property);
      if (this.options.multi) {
        if (!(value != null ? value.__isCollection : void 0)) {
          if (!this.options.required) {
            return;
          }
          return new comerr.Invalid("" + this.property + " must be a collection");
        } else {
          values = value.source();
        }
      } else {
        values = [value];
      }
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        v = values[_i];
        if (v === void 0 && !this.options.required) {
          continue;
        }
        if (!this.options.test(v)) {
          error = new comerr.Invalid("'" + this.property + "' is invalid", {
            field: this
          });
        }
        if (this.options.ref && !((v != null ? v.__isModel : void 0) && v.schema.name === this.options.ref)) {
          error = new comerr.Invalid("'" + this.property + "' must be type " + this.options.ref);
        } else if (this.options.ref) {
          error = v.validate();
          if (error != null) {
            return error;
          }
        }
      }
      return error;
    };

    /*
    */


    Field.prototype._fetch = function(payload, next) {
      if (next == null) {
        next = function() {};
      }
      if (!this.options.fetch) {
        return next();
      }
      return this.options.fetch(payload, next);
    };

    /*
    */


    Field.prototype.fetch = function(payload, next) {
      var value;

      value = payload.model.get(this.property);
      switch (payload.method) {
        case "POST":
          return this._save(value, payload, next);
        case "PUT":
          return this._save(value, payload, next);
        case "GET":
          return this._get(value, payload, next);
        case "DELETE":
          return this._del(value, payload, next);
      }
    };

    /*
    */


    Field.prototype._get = function(value, payload, next) {
      return this._fetch(payload, next);
    };

    /*
    */


    Field.prototype._save = function(value, payload, next) {
      var err;

      err = this.validate(payload.model);
      if (err != null) {
        return next(err);
      }
      if (this.options.ref && !this.options.multi) {
        if (value != null ? value.hasChanged() : void 0) {
          return value.save(next);
        } else {
          return next();
        }
      } else {
        if (this.options.multi) {
          if (!payload.collection) {
            return next();
          }
        } else if (!payload.changed[this.property]) {
          return next();
        }
        return this._fetch(payload, next);
      }
    };

    /*
    */


    Field.prototype._del = function(value, payload, next) {
      return this._fetch(payload, next);
    };

    /*
     maps a value based on its type - this happens only once
    */


    Field.prototype["default"] = function(value) {
      var def;

      def = this._getDefault(value);
      if (this.options.map) {
        def = this.options.map(value);
      }
      if (this.options.multi) {
        return new Collection(this);
      }
      return def;
    };

    /*
    */


    Field.prototype.map = function(value) {
      var model;

      if (this.options.multi && value.__isCollection) {
        return value;
      }
      if (this.options.ref) {
        if (value.__isModel) {
          return value;
        }
        model = this.linen.model(this.options.ref, value);
        model.field = this;
        return model;
      }
      return value;
    };

    /*
    */


    Field.prototype._getDefault = function(value) {
      if (!this.options["default"]) {
        return value;
      }
      if (type(this.options["default"]) === "function") {
        return this.options["default"].call(this);
      }
      return this.options["default"];
    };

    return Field;

  })();

  module.exports = Field;

}).call(this);
