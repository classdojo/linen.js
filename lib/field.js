// Generated by CoffeeScript 1.6.2
(function() {
  var Collection, Field, Model, comerr;

  Collection = require("./collection");

  Model = require("./model");

  comerr = require("comerr");

  Field = (function() {
    /*
    */
    function Field(fields, options) {
      this.fields = fields;
      this.schema = this.fields.schema;
      this.linen = this.schema.linen;
      this.property = options.property;
      this._required = options.required;
      this._map = options.map;
      this._multi = options.mutli;
      this._ref = options.ref;
      this._default = options["default"];
      this._test = options.test;
      this._save = options.save;
    }

    /*
    */


    Field.prototype.validate = function(model) {
      var error, v, value, values, _i, _len;

      value = model.get(this.property);
      if (this._multi) {
        if (!(value != null ? value.__isCollection : void 0)) {
          error = new comerr.Invalid("" + this.property + " must be a collection");
        } else {
          values = value.source();
        }
      } else {
        values = [value];
      }
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        v = values[_i];
        if (!this._test(v) && (v !== void 0 || this._required)) {
          error = new comerr.Invalid("'" + this.property + "' is invalid", {
            field: this
          });
        }
        if (this._ref && !((v != null ? v.__isModel : void 0) && v.schema.name === this._ref)) {
          error = new comerr.Invalid("'" + this.property + "' must be type " + this._ref);
        } else if (this._ref) {
          error = v.validate();
          if (error != null) {
            return error;
          }
        }
      }
      return error;
    };

    /*
    */


    Field.prototype.save = function(payload, next) {
      var err, model, value;

      model = payload.model;
      err = this.validate(model);
      if (err != null) {
        return next(err);
      }
      if (this._ref) {
        value = model.get(this.property);
        if (value != null ? value.changed() : void 0) {
          return value.schema.save(payload.child(value), next);
        } else {
          return next();
        }
      } else {
        if (!~payload.keys.indexOf(this.property) || !this._save) {
          return next();
        }
        return this._save(payload, next);
      }
    };

    /*
     maps a value based on its type - this happens only once
    */


    Field.prototype.map = function(value) {
      var def;

      def = this._getDefault(value);
      if (this._map) {
        def = this._map(value);
      }
      if (this._multi) {
        return new Collection(this);
      }
      if (!this._ref) {
        return value;
      }
      return this.linen.model(this._ref, value);
    };

    /*
    */


    Field.prototype._getDefault = function(value) {
      if (!this._default) {
        return value;
      }
      if (type(this.options) === "function") {
        return this._default();
      }
      return this._default;
    };

    return Field;

  })();

  module.exports = Field;

}).call(this);
