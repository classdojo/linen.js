// Generated by CoffeeScript 1.6.2
(function() {
  var Validator, async, dref, toarray, validatorClasses;

  toarray = require("toarray");

  async = require("async");

  dref = require("dref");

  validatorClasses = [require("./type"), require("./fn")];

  Validator = (function() {
    /*
    */
    function Validator(schema) {
      var op, options, validator, validators, _i, _len;

      this.schema = schema;
      this.property = this.schema.options.property;
      this.name = this.schema.options.name;
      this.required = this.schema.options.required;
      validators = [];
      options = toarray(schema.options.validate);
      options.push(this.schema.options);
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        op = options[_i];
        validator = this._getValidator(op);
        if (!validator) {
          continue;
        }
        validators.push(validator);
      }
      this._validators = validators;
    }

    /*
    */


    Validator.prototype.validate = function(modelOrValue, next) {
      var value,
        _this = this;

      if (this.property) {
        value = dref.get(modelOrValue, this.property);
      } else {
        value = modelOrValue;
      }
      if (value == null) {
        if (this.required) {
          return next(new Error("'" + this.name + "' must be defined"));
        } else {
          return next();
        }
      }
      return async.forEach(this._validators, (function(validator, next) {
        return validator.validate(value, next);
      }), function(err) {
        if (err) {
          err.message = "'" + _this.name + "' " + err.message;
          return next(err);
        }
        return _this._validateFields(value, next);
      });
    };

    /*
    */


    Validator.prototype._validateFields = function(value, next) {
      var _this = this;

      return async.forEach(this.schema.fields, (function(field, next) {
        return field.validate(value, next);
      }), next);
    };

    /*
    */


    Validator.prototype._getValidator = function(options) {
      var validatorClass, _i, _len;

      for (_i = 0, _len = validatorClasses.length; _i < _len; _i++) {
        validatorClass = validatorClasses[_i];
        if (validatorClass.test(options)) {
          return new validatorClass(options);
        }
      }
    };

    return Validator;

  })();

  module.exports = Validator;

}).call(this);
