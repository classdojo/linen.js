// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Schema, Validator, Virtuals, async, bindable, dref, outcome, parseSchemaOps, type, _;

  bindable = require("bindable");

  Model = require("./model");

  type = require("type-component");

  Validator = require("./validator");

  _ = require("underscore");

  dref = require("dref");

  outcome = require("outcome");

  async = require("async");

  Virtuals = require("./virtuals");

  Schema = (function() {
    /*
    */
    function Schema(options) {
      var field, _i, _len, _ref;

      this.options = options;
      this.fields = options.fields;
      this.name = options.name;
      this.linen = options.linen;
      this.path = options.path;
      this.fieldNames = [];
      this._fieldsByKey = {};
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this._fieldsByKey[field.name] = field;
        this.fieldNames.push(field.name);
        field.parent = this;
      }
      this.validator = new Validator(this);
      this.virtuals = new Virtuals(this);
    }

    /*
    */


    Schema.prototype.model = function(data) {
      var key, model;

      if (data == null) {
        data = {};
      }
      if (type(data) === "string") {
        data = {
          _id: data
        };
      }
      model = new Model(this, data);
      for (key in this._methods) {
        model[key] = this._methods[key];
      }
      return model;
    };

    /*
     fetch a particular field - this is called
     once a property is watched
    */


    Schema.prototype.fetchField = function(model, fieldName) {
      var _ref;

      return (_ref = this.field(fieldName)) != null ? _ref.virtuals.fetch(model) : void 0;
    };

    /*
     fetch the particular model
    */


    Schema.prototype.fetch = function(model, next) {
      return this.virtuals.fetch(model, next);
    };

    /*
     fetch ALL the fields in a given model
    */


    Schema.prototype.fetchAll = function(model, next) {
      var _this = this;

      return this.fetch(model, function() {
        return async.forEach(_this.fields, (function(field, next) {
          return field.fetchAll(model, next);
        }), next);
      });
    };

    /*
    */


    Schema.prototype.persist = function(model, changed) {};

    /*
    */


    Schema.prototype.field = function(property) {
      var field, path;

      if (property == null) {
        property = "";
      }
      path = property.split(".");
      field = this._fieldsByKey[path.shift()];
      if (field && path.length) {
        return field.field(path.join("."));
      } else {
        return field;
      }
    };

    /*
    */


    Schema.prototype.value = function(modelOrValue) {
      var value;

      if (this.options.property) {
        value = dref.get(modelOrValue, this.options.property);
      } else {
        value = modelOrValue;
      }
      return value;
    };

    /*
    */


    Schema.prototype.validate = function(modelOrValue, next) {
      var value,
        _this = this;

      value = this.value(modelOrValue);
      return this.validator.validate(value, function(err) {
        if (err) {
          err.message = "'" + _this.name + "' " + err.message;
          return next(err);
        }
        return _this._validateFields(value, next);
      });
    };

    /*
    */


    Schema.prototype._validateFields = function(value, next) {
      var _this = this;

      return async.forEach(this.fields, (function(field, next) {
        return field.validate(value, next);
      }), next);
    };

    /*
     parse a definition. Something like:
    
     {
      name: "string",
      address: {
        $type: "string"
      },
      $fetch: function() {
    
      }
     }
    */


    return Schema;

  })();

  parseSchemaOps = function(definition, name, linen, path) {
    var fieldOps, ops, property, pt, schemaOps, schemaOptions, t;

    if (path == null) {
      path = [];
    }
    ops = {};
    schemaOps = {
      name: name,
      linen: linen,
      path: path.join("."),
      fields: []
    };
    if ((t = type(definition)) === "array") {
      ops = definition[0];
      ops.collection = true;
    } else if (t === "object") {
      _.extend(ops, definition);
    } else if (t === "string") {
      ops.$type = definition;
    }
    schemaOptions = {};
    for (property in ops) {
      if (property.substr(0, 1) === "$") {
        schemaOps[property.substr(1)] = ops[property];
      } else {
        pt = path.concat(property);
        fieldOps = parseSchemaOps(ops[property], property, linen, pt);
        fieldOps.property = property;
        schemaOps.fields.push(new Schema(fieldOps));
      }
    }
    return schemaOps;
  };

  module.exports = function(options, name, linen) {
    return new Schema(parseSchemaOps(options, name, linen));
  };

}).call(this);
