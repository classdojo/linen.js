// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Schema, flatstack, parser, type;

  type = require("type-component");

  parser = require("./fieldParser");

  Model = require("./model");

  flatstack = require("flatstack");

  Schema = (function() {
    /*
    */
    function Schema(linen, options) {
      this.linen = linen;
      this.options = options != null ? options : {};
      this.name = options.name;
      options.fields._id = "string";
      this.fields = parser.parse(this, options.fields);
      this.methods = options.methods;
    }

    /*
    */


    Schema.prototype.isVirtual = function() {
      return !!this.options.fetch;
    };

    /*
    */


    Schema.prototype.model = function(data) {
      var d, m, methodName;

      d = {};
      if (type(data) === "string") {
        d._id = data;
      } else {
        d = data || {};
      }
      m = new Model(this);
      m.reset(d = this.fields["default"](d, m));
      m._bindFields();
      if (!m.isNew()) {
        m.flushChanged();
      }
      for (methodName in this.methods) {
        m[methodName] = this.methods[methodName];
      }
      return m;
    };

    /*
    */


    Schema.prototype.map = function(model, key, value) {
      return this.fields.map(model, key, value);
    };

    /*
    */


    Schema.prototype.validate = function(model) {
      return this.fields.validate(model);
    };

    /*
    */


    Schema.prototype.fetch = function(payload, next) {
      switch (payload.method) {
        case "GET":
          return this._get(payload, next);
        case "PUT":
          return this._save(payload, next);
        case "POST":
          return this._save(payload, next);
        case "DELETE":
          return this._delete(payload, next);
      }
    };

    /*
    */


    Schema.prototype._get = function(payload, next) {
      this.fields.fetch(payload);
      return this._fetch(payload, next);
    };

    /*
    */


    Schema.prototype._save = function(payload, next) {
      var callstack, changed, data, item, model, modelData, usable, _i, _len,
        _this = this;

      callstack = flatstack();
      callstack.error(function(err) {
        callstack.pause();
        return next(err);
      });
      model = payload.target;
      modelData = void 0;
      changed = payload.changed;
      usable = changed.filter(function(value) {
        return !_this.fields.get(value.key).isVirtual();
      });
      if (payload.method === "POST" || usable.length) {
        data = {};
        for (_i = 0, _len = changed.length; _i < _len; _i++) {
          item = changed[_i];
          data[item.key] = item.nv;
        }
        callstack.push(function(next) {
          return _this._fetch(payload, function(err, result) {
            if (err != null) {
              return next(err);
            }
            modelData = result;
            return next();
          });
        });
      }
      callstack.push(function(next) {
        return _this.fields.fetch(payload, next);
      });
      return callstack.push(function() {
        return next(null, modelData);
      });
    };

    /*
    */


    Schema.prototype._delete = function(payload, next) {
      if (!payload.model.has("_id")) {
        return next(comerr.Invalid("_id must be present when deleting a model"));
      }
      return this._fetch(payload, next);
    };

    /*
    */


    Schema.prototype._fetch = function(payload, next) {
      if (next == null) {
        next = function() {};
      }
      if (!this.options.fetch) {
        return next();
      }
      return this.options.fetch(payload, function(err, result) {
        if (err != null) {
          return next(err);
        }
        return next(null, result);
      });
    };

    return Schema;

  })();

  module.exports = Schema;

}).call(this);
