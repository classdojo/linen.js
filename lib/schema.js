// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Schema, Validator, Virtuals, async, bindable, dref, outcome, parseSchemaOps, type, _;

  bindable = require("bindable");

  Model = require("./model");

  type = require("type-component");

  Validator = require("./validator");

  _ = require("underscore");

  dref = require("dref");

  outcome = require("outcome");

  async = require("async");

  Virtuals = require("./virtuals");

  Schema = (function() {
    /*
    */
    function Schema(options, name, linen) {
      var field, _i, _len, _ref;

      this.options = options;
      this.name = name;
      this.linen = linen;
      this._fields = {};
      this.fields = options.fields;
      this._fieldsByKey = {};
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this._fieldsByKey[field.name] = field;
      }
      this.validator = new Validator(this);
      this.virtuals = new Virtuals(this);
    }

    /*
    */


    Schema.prototype.model = function(data) {
      var key, model;

      if (type(data) === "string") {
        data = {
          _id: data
        };
      }
      model = new Model(this);
      for (key in this._methods) {
        model[key] = this._methods[key];
      }
      model.reset(data);
      return model;
    };

    /*
      model.get(k)
    */


    Schema.prototype.vget = function(model, key) {
      var _ref;

      return (_ref = this.field(key)) != null ? _ref.virtuals.get(model) : void 0;
    };

    /*
      model.set(k, v)
    */


    Schema.prototype.vset = function(model, key, value) {};

    /*
    */


    Schema.prototype.field = function(property) {
      var field, path;

      if (property == null) {
        property = "";
      }
      path = property.split(".");
      field = this._fieldsByKey[path.shift()];
      if (field && path.length) {
        return field.field(path.join("."));
      } else {
        return field;
      }
    };

    /*
    */


    Schema.prototype.value = function(modelOrValue) {
      var value;

      if (this.options.property) {
        value = dref.get(modelOrValue, this.options.property);
      } else {
        value = modelOrValue;
      }
      return value;
    };

    /*
    */


    Schema.prototype["default"] = function(model) {};

    /*
      model.fetch() OR when a property is listened to
    */


    Schema.prototype.fetch = function(payload, key) {
      if (key == null) {
        key = void 0;
      }
    };

    /*
    */


    Schema.prototype.validate = function(modelOrValue, next) {
      var value,
        _this = this;

      value = this.value(modelOrValue);
      return this.validator.validate(value, function(err) {
        if (err) {
          err.message = "'" + _this.name + "' " + err.message;
          return next(err);
        }
        return _this._validateFields(value, next);
      });
    };

    /*
    */


    Schema.prototype._validateFields = function(value, next) {
      var _this = this;

      return async.forEach(this.fields, (function(field, next) {
        return field.validate(value, next);
      }), next);
    };

    /*
     parse a definition. Something like:
    
     {
      name: "string",
      address: {
        $type: "string"
      },
      $fetch: function() {
    
      }
     }
    */


    return Schema;

  })();

  parseSchemaOps = function(definition, name, linen) {
    var fieldOps, ops, property, schemaOps, schemaOptions, t;

    ops = {};
    schemaOps = {
      name: name,
      fields: []
    };
    if ((t = type(definition)) === "array") {
      ops = definition[0];
      ops.collection = true;
    } else if (t === "object") {
      _.extend(ops, definition);
    } else if (t === "string") {
      ops.$type = definition;
    }
    schemaOptions = {};
    for (property in ops) {
      if (property.substr(0, 1) === "$") {
        schemaOps[property.substr(1)] = ops[property];
      } else {
        fieldOps = parseSchemaOps(ops[property], property, linen);
        fieldOps.property = property;
        schemaOps.fields.push(new Schema(fieldOps, property, linen));
      }
    }
    return schemaOps;
  };

  module.exports = function(options, name, linen) {
    return new Schema(parseSchemaOps(options, name, linen), name, linen);
  };

}).call(this);
