// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Schema, flatstack, parser, type;

  type = require("type-component");

  parser = require("./fieldParser");

  Model = require("./model");

  flatstack = require("flatstack");

  Schema = (function() {
    /*
    */
    function Schema(linen, options) {
      this.linen = linen;
      if (options == null) {
        options = {};
      }
      this.name = options.name;
      this._fetch = options.fetch;
      this.fields = parser.parse(this, options.fields);
    }

    /*
    */


    Schema.prototype.isVirtual = function() {
      return !!this._fetch;
    };

    /*
    */


    Schema.prototype.model = function(data) {
      var d, m;

      d = {};
      if (type(data) === "string") {
        d._id = data;
      } else {
        d = data || {};
      }
      m = new Model(this);
      m.reset(this.fields.map(d));
      if (!m.isNew()) {
        m.flushChanged();
      }
      return m;
    };

    /*
    */


    Schema.prototype.validate = function(model) {
      return this.fields.validate(model);
    };

    /*
    */


    Schema.prototype.save = function(payload, next) {
      var callstack, usableKeys,
        _this = this;

      callstack = flatstack();
      usableKeys = payload.keys.filter(function(key) {
        return !_this.fields.get(key).isVirtual();
      });
      if (this._fetch && (payload.model.isNew() || usableKeys.length)) {
        callstack.push(function(next) {
          return _this._fetch({
            method: (payload.model.isNew() ? "POST" : "PUT"),
            model: payload.model,
            data: payload.data(usableKeys)
          }, next);
        });
      }
      callstack.push(function(next2) {
        return _this.fields.save(payload, function(err) {
          if (err != null) {
            return next(err);
          }
          return next2();
        });
      });
      return callstack.push(function() {
        return next();
      });
    };

    /*
    */


    Schema.prototype.fill = function(model, properties) {
      var field, property, _i, _len, _results;

      if (!properties) {
        properties = this.fields.names();
      }
      _results = [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        property = properties[_i];
        field = this.fields.get(property);
        _results.push(field != null ? field.fetch(model) : void 0);
      }
      return _results;
    };

    /*
    */


    Schema.prototype.del = function(model, next) {
      return this._fetch({
        method: "DELETE",
        model: model
      }, next);
    };

    return Schema;

  })();

  module.exports = Schema;

}).call(this);
