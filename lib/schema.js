// Generated by CoffeeScript 1.6.2
(function() {
  var Field, Model, Schema, dref, payload, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require("./model");

  type = require("type-component");

  Field = require("./field");

  payload = require("./payload");

  dref = require("dref");

  Schema = (function(_super) {
    __extends(Schema, _super);

    /*
    */


    function Schema(options) {
      Schema.__super__.constructor.call(this, options);
      this._modelClass = options.modelClass || Model;
      this._createModel = options.createModel || this._defaultCreateModel;
    }

    /*
    */


    Schema.prototype.isNew = function(model) {
      return !model.get("_id");
    };

    /*
    */


    Schema.prototype.model = function(data) {
      var model;

      if (data == null) {
        data = {};
      }
      if (type(data) === "string") {
        data = {
          _id: data
        };
      }
      model = this._createModel(this, data);
      return model;
    };

    /*
    */


    Schema.prototype.save = function(model, next) {
      var ct, p;

      p = payload.model(model);
      if (model.isNew()) {
        p.method("post").body(this.toJSON(model));
      } else {
        p.method("put").body(this.toJSON(model, {
          fields: ct = this._getChangedFields(model)
        }));
      }
      return this.fetchAll(p.options, next);
    };

    /*
    */


    Schema.prototype._getChangedFields = function(model) {
      var changedFields, field, _i, _len, _ref;

      changedFields = [];
      _ref = this.allFields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (model._changeWatcher.change(field.path)) {
          changedFields.push(field);
        }
      }
      return changedFields;
    };

    /*
    */


    Schema.prototype._defaultCreateModel = function(schema, data) {
      return new this._modelClass(this, data);
    };

    return Schema;

  })(Field);

  module.exports = function(options, name, linen) {
    if (options == null) {
      options = {};
    }
    if (name == null) {
      name = void 0;
    }
    if (linen == null) {
      linen = void 0;
    }
    options._id = "string";
    return new Schema(Field.parseOptions(options, name, linen)).init();
  };

}).call(this);
