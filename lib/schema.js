// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Schema, bindable, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  Model = require("./model");

  type = require("type-component");

  Schema = (function(_super) {
    __extends(Schema, _super);

    /*
    */


    function Schema(linen, name, definition) {
      this.linen = linen;
      this.name = name;
      this.definition = definition;
      this._parseDefinition(definition);
    }

    /*
    */


    Schema.prototype.model = function(data) {
      return this.map(data);
    };

    /*
    */


    Schema.prototype.map = function(data) {
      var key, model;

      if (type(data) === "string") {
        data = {
          _id: data
        };
      }
      model = new Model(this);
      for (key in this._methods) {
        model[key] = this._methods[key];
      }
      model.reset(data);
      return model;
    };

    /*
      model.get(k)
    */


    Schema.prototype.vget = function(model, key) {
      var _ref;

      return (_ref = this.get(key)) != null ? _ref.value(model) : void 0;
    };

    /*
    */


    Schema.prototype.value = function(model) {};

    /*
    */


    Schema.prototype["default"] = function(model) {};

    /*
      model.set(k, v)
    */


    Schema.prototype.vset = function(model, key, value) {
      var _ref, _ref1;

      return (_ref = (_ref1 = this.get(key)) != null ? _ref1.map(value) : void 0) != null ? _ref : value;
    };

    /*
      model.fetch() OR when a property is listened to
    */


    Schema.prototype.fetch = function(model, key) {
      if (key == null) {
        key = void 0;
      }
    };

    /*
    */


    Schema.prototype.validate = function(model, next) {};

    /*
     called when PUT or POST
    */


    Schema.prototype.save = function(model, next) {};

    /*
    */


    Schema.prototype._parseDefinition = function(definition) {
      var key, ops, _results;

      ops = {};
      if (type(definition) === "string") {
        ops.type = definition;
      } else if (this._isOps(definition)) {
        ops = this._cleanOps(definition);
      } else {
        ops.fields = definition;
      }
      _results = [];
      for (key in ops.fields) {
        _results.push(this.set(key, this._parseField(property, definition.fields)));
      }
      return _results;
    };

    /*
    */


    Schema.prototype._parseField = function(property, field) {
      return this.set(property, new Schema(this.linen, property, field));
    };

    /*
    */


    Schema.prototype._isOps = function(ops) {
      var key;

      for (key in ops) {
        if (key.substr(0, 1) === "$") {
          return true;
        }
      }
      return false;
    };

    /*
    */


    Schema.prototype._cleanOps = function(ops) {
      var key, nops;

      nops = {};
      for (key in ops) {
        nops[key.substr(0, 1)] = key;
      }
      return nops;
    };

    return Schema;

  })(bindable.Object);

  module.exports = Schema;

}).call(this);
