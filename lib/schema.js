// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Schema, Validator, bindable, type, _;

  bindable = require("bindable");

  Model = require("./model");

  type = require("type-component");

  Validator = require("./validator");

  _ = require("underscore");

  Schema = (function() {
    /*
    */
    function Schema(options, name, linen) {
      this.name = name;
      this.linen = linen;
      this._fields = {};
      this._parseDefinition(options);
      this.validator = new Validator(this, this.options);
    }

    /*
    */


    Schema.prototype.model = function(data) {
      return this.map(data);
    };

    /*
    */


    Schema.prototype.map = function(data) {
      var key, model;

      if (type(data) === "string") {
        data = {
          _id: data
        };
      }
      model = new Model(this);
      for (key in this._methods) {
        model[key] = this._methods[key];
      }
      model.reset(data);
      return model;
    };

    /*
      model.get(k)
    */


    Schema.prototype.vget = function(model, key) {
      var _ref;

      return (_ref = this.get(key)) != null ? _ref.value(model) : void 0;
    };

    /*
      model.set(k, v)
    */


    Schema.prototype.vset = function(model, key, value) {
      var _ref, _ref1;

      return (_ref = (_ref1 = this.get(key)) != null ? _ref1.map(value) : void 0) != null ? _ref : value;
    };

    /*
    */


    Schema.prototype.field = function(property) {
      var field, path;

      if (property == null) {
        property = "";
      }
      path = property.split(".");
      field = this._fields[path.shift()];
      if (field && path.length) {
        return field.field(path.join("."));
      } else {
        return field;
      }
    };

    /*
    */


    Schema.prototype.value = function(model) {};

    /*
    */


    Schema.prototype["default"] = function(model) {};

    /*
      model.fetch() OR when a property is listened to
    */


    Schema.prototype.fetch = function(payload, key) {
      if (key == null) {
        key = void 0;
      }
    };

    /*
    */


    Schema.prototype.validate = function(model, next) {};

    /*
     parse a definition. Something like:
    
     {
      name: "string",
      address: {
        $type: "string"
      },
      $fetch: function() {
    
      }
     }
    */


    Schema.prototype._parseDefinition = function(definition) {
      var ops, property, schemaOptions, t;

      ops = {
        $name: this.name
      };
      if ((t = type(definition)) === "array") {
        ops = definition[0];
        ops.collection = true;
      } else if (t === "object") {
        _.extend(ops, definition);
      } else if (t === "string") {
        ops.$type = definition;
      }
      schemaOptions = {};
      for (property in ops) {
        if (property.substr(0, 1) === "$") {
          schemaOptions[property.substr(1)] = ops[property];
        } else {
          this._fields[property] = new Schema(ops[property], property, this.linen);
        }
      }
      return this.options = schemaOptions;
    };

    return Schema;

  })();

  module.exports = Schema;

}).call(this);
