// Generated by CoffeeScript 1.6.2
(function() {
  var DataMapFieldController, dataMapperFactory, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dataMapperFactory = require('./decor/factory');

  DataMapFieldController = (function(_super) {
    __extends(DataMapFieldController, _super);

    function DataMapFieldController() {
      _ref = DataMapFieldController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    DataMapFieldController.prototype.name = "mapper";

    /*
    */


    DataMapFieldController.prototype.map = function(model, data) {
      return this._mapField(this.rootField, model, data);
    };

    /*
    */


    DataMapFieldController.prototype._mapField = function(field, model, oldData) {
      var childField, d, hasData, newData, _i, _len, _ref1;

      newData = field._mapper.map(model, oldData != null ? oldData : model.get(field.path));
      if (field.numFields) {
        hasData = newData;
        if (!newData) {
          newData = {};
        }
        if (!oldData) {
          oldData = {};
        }
      } else {
        hasData = true;
      }
      _ref1 = field.fields;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        childField = _ref1[_i];
        d = newData[childField.name] = this._mapField(childField, model, oldData[childField.name]);
        hasData = hasData || (d != null);
      }
      if (hasData) {
        return newData;
      } else {
        return void 0;
      }
    };

    /*
    */


    DataMapFieldController.prototype._mapPath = function(path, model, oldData) {
      var field;

      if (!path || path.length === 0) {
        field = this.rootField;
      } else {
        field = this.rootField.getField(path);
      }
      return this._mapField(field, model, oldData);
    };

    /*
    */


    DataMapFieldController.prototype.prepareModel = function(model, data) {
      var mapper, _i, _len, _ref1,
        _this = this;

      model.reset = function(data, path) {
        var newData;

        if (path == null) {
          path = "";
        }
        newData = _this._mapPath(path, model, data);
        if (path === "") {
          return model.set(newData || {});
        } else {
          return model.set(path, newData);
        }
      };
      _ref1 = this._decorators;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        mapper = _ref1[_i];
        mapper.prepareModel(model, data);
      }
      return model.reset(data);
    };

    /*
    */


    DataMapFieldController.prototype._createFieldDecorator = function(field) {
      return dataMapperFactory.create(field);
    };

    return DataMapFieldController;

  })(require("../base"));

  module.exports = function(rootField) {
    return new DataMapFieldController(rootField);
  };

}).call(this);
