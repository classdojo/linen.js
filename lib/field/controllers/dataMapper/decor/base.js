// Generated by CoffeeScript 1.6.2
(function() {
  var BaseMapper;

  BaseMapper = (function() {
    /*
    */
    function BaseMapper(field) {
      this.field = field;
      this._fields = field.fields;
    }

    /*
    */


    BaseMapper.prototype.map = function(model, data) {
      return this._mapChildFields(model, data);
    };

    /*
    */


    BaseMapper.prototype._mapChildFields = function(model, oldData, newData) {
      var checkData, d, field, hasNew, _i, _len, _ref, _ref1;

      checkData = oldData || {};
      if (newData) {
        hasNew = true;
      } else {
        newData = {};
      }
      _ref = this._fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        d = newData[field.name] = field._mapper.map(model, (_ref1 = checkData[field.name]) != null ? _ref1 : model.get(field.path));
        hasNew = hasNew || (d != null);
      }
      if (!hasNew) {
        return oldData;
      }
      return newData;
    };

    /*
    
    _mapFields: (field, model, oldData) ->
    
      newData = field._mapper.map model, oldData ? model.get(field.path)
    
      # if there are sub fields, then the data must be an object
      if field.numFields
        hasData = newData
        unless newData
          newData = {}
        unless oldData
          oldData = {}
      else
        hasData = true
    
      for childField in field.fields
        d = newData[childField.name] = @_mapField childField, model, oldData[childField.name]
        hasData = hasData or d?
    
      if hasData then newData else undefined
    */


    /*
    */


    BaseMapper.prototype.normalize = function(model) {
      return this._normalizeChildFields(model, model.get(this.field.path));
    };

    /*
    */


    BaseMapper.prototype._normalizeChildFields = function(model, data) {
      var field, _i, _len, _ref;

      if (!this._fields.length) {
        return data;
      }
      if (!data) {
        data = {};
      }
      _ref = this._fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        data[field.name] = field._mapper.normalize(model);
      }
      return data;
    };

    /*
    */


    BaseMapper.prototype.prepareModel = function(model, data) {};

    return BaseMapper;

  })();

  module.exports = BaseMapper;

}).call(this);
