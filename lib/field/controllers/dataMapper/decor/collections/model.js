// Generated by CoffeeScript 1.6.2
(function() {
  var ModelCollection, bindable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  ModelCollection = (function(_super) {
    __extends(ModelCollection, _super);

    /*
    */


    function ModelCollection(field, owner) {
      var _this = this;

      this.field = field;
      this.owner = owner;
      this._onRemove = __bind(this._onRemove, this);
      this._onInsert = __bind(this._onInsert, this);
      ModelCollection.__super__.constructor.call(this);
      this.transform().map(function(v) {
        return _this.field._refMapper.map(_this.owner, v);
      });
      this.on({
        insert: this._onInsert,
        remove: this._onRemove
      });
    }

    /*
    */


    ModelCollection.prototype.clear = function() {
      var item, _i, _len, _ref, _results;

      _ref = this.source().concat();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(item.remove());
      }
      return _results;
    };

    /*
    */


    ModelCollection.prototype.model = function(data) {
      var model,
        _this = this;

      if (data == null) {
        data = {};
      }
      model = this.field._refMapper.map(this.owner, data);
      model.once("save", function() {
        return _this.push(model);
      });
      return model;
    };

    /*
    */


    ModelCollection.prototype.resetModels = function(src) {
      var esrc, existingItem, found, i, item, newItem, src2, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _results;

      src2 = src.concat();
      esrc = this.source().concat();
      for (_i = 0, _len = esrc.length; _i < _len; _i++) {
        existingItem = esrc[_i];
        for (i = _j = 0, _len1 = src.length; _j < _len1; i = ++_j) {
          newItem = src[i];
          if (this._compare(existingItem, newItem)) {
            existingItem.reset(newItem);
            src.splice(i, 1);
            break;
          }
        }
      }
      for (i = _k = 0, _len2 = esrc.length; _k < _len2; i = ++_k) {
        existingItem = esrc[i];
        found = false;
        for (_l = 0, _len3 = src2.length; _l < _len3; _l++) {
          newItem = src2[_l];
          if (this._compare(existingItem, newItem)) {
            found = true;
            break;
          }
        }
        if (!found) {
          this.splice(i, 1);
        }
      }
      _results = [];
      for (_m = 0, _len4 = src.length; _m < _len4; _m++) {
        item = src[_m];
        _results.push(this.push(item));
      }
      return _results;
    };

    /*
    */


    ModelCollection.prototype._compare = function(a, b) {
      var aid;

      aid = a.get("_id");
      return (aid === b._id) || (aid === b);
    };

    /*
    */


    ModelCollection.prototype._onInsert = function(model) {
      var _this = this;

      return model.once("remove", function() {
        return _this.remove(model);
      });
    };

    /*
    */


    ModelCollection.prototype._onRemove = function(model) {};

    return ModelCollection;

  })(bindable.Collection);

  module.exports = ModelCollection;

}).call(this);
