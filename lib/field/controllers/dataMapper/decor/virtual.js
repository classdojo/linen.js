// Generated by CoffeeScript 1.6.2
/*
field: {
  $get: () -> @get("property")
  $set: (value) -> @set "property", value
  $bind: ["property", "anotherProperty"]
}
*/


(function() {
  var VirtualMapper,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  VirtualMapper = (function(_super) {
    __extends(VirtualMapper, _super);

    /*
    */


    function VirtualMapper(field) {
      VirtualMapper.__super__.constructor.call(this, field);
      field.options.persist = false;
      this._get = field.options.get;
      this._set = field.options.set || function() {};
      this._bind = field.options.bind;
    }

    /*
    */


    VirtualMapper.prototype.prepareModel = function(model, data) {
      var ignoreChange, onChange, onFieldChange, prop, _i, _len, _ref,
        _this = this;

      ignoreChange = false;
      onChange = function() {
        if (ignoreChange) {
          return;
        }
        ignoreChange = true;
        model.set(_this.field.path, _this._get.call(model));
        return ignoreChange = false;
      };
      onFieldChange = function(value) {
        if (ignoreChange || !_this._get) {
          return;
        }
        ignoreChange = true;
        _this._set.call(model, value);
        return ignoreChange = false;
      };
      _ref = this._bind;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        model.bind(prop).to(onChange);
      }
      model.bind(this.field.path).delay(-1).to(onFieldChange).now();
      return onChange();
    };

    /*
    */


    VirtualMapper.test = function(field) {
      return field.options.get || field.options.set || field.options.bind;
    };

    return VirtualMapper;

  })(require("./base"));

  module.exports = VirtualMapper;

}).call(this);
