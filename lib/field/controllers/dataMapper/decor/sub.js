// Generated by CoffeeScript 1.6.2
(function() {
  var SubMapper, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SubMapper = (function(_super) {
    __extends(SubMapper, _super);

    function SubMapper() {
      _ref = SubMapper.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    SubMapper.prototype.map = function(model, data) {
      var checkData, d, field, hasNew, oldData, _i, _len, _ref1, _ref2;

      oldData = data;
      checkData = data || {};
      if (data) {
        hasNew = true;
      } else {
        data = {};
      }
      _ref1 = this._fields;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        field = _ref1[_i];
        d = data[field.name] = field._mapper.map(model, (_ref2 = checkData[field.name]) != null ? _ref2 : model.get(field.path));
        hasNew = hasNew || (d != null);
      }
      if (!hasNew) {
        return oldData;
      }
      return data;
    };

    /*
    */


    SubMapper.prototype.normalize = function(model, data) {
      if (data == null) {
        data = {};
      }
      return this._normalizeChildFields(model, data);
    };

    /*
    */


    SubMapper.prototype._normalizeChildFields = function(model, data) {
      var field, _i, _len, _ref1;

      if (!this._fields.length) {
        return data;
      }
      if (!data) {
        data = {};
      }
      _ref1 = this._fields;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        field = _ref1[_i];
        data[field.name] = field._mapper.normalize(model);
      }
      return data;
    };

    /*
    */


    SubMapper.test = function(field) {
      return !!field.fields.length;
    };

    return SubMapper;

  })(require("./base"));

  module.exports = SubMapper;

}).call(this);
