// Generated by CoffeeScript 1.6.2
(function() {
  var TypeValidator, type, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  type = require("type-component");

  TypeValidator = (function(_super) {
    __extends(TypeValidator, _super);

    function TypeValidator() {
      _ref = TypeValidator.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TypeValidator.prototype.validate = function(model, next) {
      var t, valid, value;

      value = model.get(this.field.path);
      if (value == null) {
        return next();
      }
      t = type(value);
      valid = t === this.field.options.type;
      switch (t) {
        case "number":
          valid = valid && !isNaN(value);
          break;
        case "string":
          valid = true;
      }
      if (!valid) {
        return next(new Error("" + this.field.path + " must be a " + this.field.options.type));
      } else {
        return next();
      }
    };

    TypeValidator.test = function(field) {
      return field.options.type;
    };

    return TypeValidator;

  })(require("./base"));

  module.exports = TypeValidator;

}).call(this);
