// Generated by CoffeeScript 1.6.2
(function() {
  var Cache, MemoDictionary, Transporter, async, dataMapper, transporterFactory, type, validator,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  validator = require("../validator");

  dataMapper = require("../dataMapper");

  type = require("type-component");

  async = require("async");

  MemoDictionary = require("./memoize/dictionary");

  transporterFactory = require("./decor/factory");

  Cache = require("./cache");

  /*
   transports the model data to / from a server - restful
  */


  Transporter = (function(_super) {
    __extends(Transporter, _super);

    /*
    */


    Transporter.prototype.name = "transporter";

    /*
    */


    function Transporter(rootField) {
      Transporter.__super__.constructor.call(this, rootField);
      this._validator = validator(rootField);
      this._dataMapper = dataMapper(rootField);
    }

    /*
    */


    Transporter.prototype.prepareModel = function(model, data, options) {
      var methodName,
        _this = this;

      if (options == null) {
        options = {};
      }
      if (type(data) === "string") {
        data = {
          _id: data
        };
      }
      this._validator.prepareModel(model, data, options);
      this._dataMapper.prepareModel(model, data, options);
      model._memos = new MemoDictionary();
      model._cache = new Cache(model, data);
      model.load = function(next) {
        return _this.load(model, next);
      };
      model.loadFields = function(fields, next) {
        return _this.loadFields(model, fields, next);
      };
      model.fetch = function(next) {
        return _this.load(model, next);
      };
      model.reload = function(next) {
        return _this.reload(model, next);
      };
      model.save = function(next) {
        return _this.save(model, next);
      };
      model.remove = function(next) {
        return _this.remove(model, next);
      };
      model.cache = function() {
        return model._cache.storeModel();
      };
      if (this.rootField.options.methods) {
        for (methodName in this.rootField.options.methods) {
          model[methodName] = this.rootField.options.methods[methodName];
        }
      }
      return model._watching = function(property) {
        var _ref;

        return (_ref = _this.rootField.getField(property, true)) != null ? _ref._transporter.watching({
          model: model,
          method: "get",
          property: property
        }, function() {}) : void 0;
      };
    };

    /*
    */


    Transporter.prototype.map = function(model, data) {
      return this._dataMapper.map(model, data);
    };

    /*
    */


    Transporter.prototype.normalize = function(model, data) {
      return this._dataMapper.normalize(model, data);
    };

    /*
    */


    Transporter.prototype.load = function(model, next) {
      return this._request({
        model: model,
        method: "get"
      }, next);
    };

    /*
    */


    Transporter.prototype.loadFields = function(model, fields, next) {
      return this._request({
        model: model,
        method: "get",
        fields: fields,
        hash: Date.now()
      }, next);
    };

    /*
    */


    Transporter.prototype.reload = function(model, next) {
      return this._request({
        model: model,
        method: "get",
        hash: Date.now()
      }, next);
    };

    /*
    */


    Transporter.prototype.save = function(model, next) {
      var _this = this;

      if (next == null) {
        next = function() {};
      }
      return this.validate(model, function(err) {
        if (err != null) {
          return next(err);
        }
        return _this._request({
          model: model,
          method: "set"
        }, function(err) {
          if (err != null) {
            return next(err);
          }
          model.emit("save");
          return next();
        });
      });
    };

    /*
    */


    Transporter.prototype.remove = function(model, next) {
      if (next == null) {
        next = function() {};
      }
      return this._request({
        model: model,
        method: "del"
      }, function(err) {
        if (err != null) {
          return next(err);
        }
        model.emit("remove");
        return next();
      });
    };

    /*
    */


    Transporter.prototype._request = function(options, next) {
      var decor, fields,
        _this = this;

      if (next == null) {
        next = function() {};
      }
      if (options.fields) {
        fields = options.fields.map(function(fieldName) {
          return _this.rootField.getField(fieldName);
        });
      } else {
        fields = this.rootField.allFields;
      }
      decor = fields.map(function(field) {
        return field._transporter;
      });
      return async.forEach(decor, (function(decor, next) {
        return decor.request(options, next);
      }), next);
    };

    /*
    */


    Transporter.prototype.validate = function(model, next) {
      if (next == null) {
        next = function() {};
      }
      return this._validator.validate(model, next);
    };

    /*
    */


    Transporter.prototype._createFieldDecorator = function(field) {
      return transporterFactory.create(field);
    };

    return Transporter;

  })(require("../base"));

  module.exports = function(field) {
    return new Transporter(field);
  };

}).call(this);
