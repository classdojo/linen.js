// Generated by CoffeeScript 1.6.2
(function() {
  var Transport, hashObject,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  hashObject = require("../memoize/hashObject");

  Transport = (function(_super) {
    __extends(Transport, _super);

    /*
    */


    function Transport() {
      Transport.__super__.constructor.apply(this, arguments);
      this._request = this.field.options.request;
      this._memoOps = {
        maxAge: 1000 * 10
      };
    }

    /*
    */


    Transport.prototype.request = function(payload, next) {
      var currentHash,
        _this = this;

      return payload.model._memos.call(currentHash = this._payloadHash(payload), this._memoOps, next, function(next) {
        var method;

        method = _this._request[payload.method];
        if (!method) {
          return next(new Error("cannot \"" + (payload.method.toUpperCase()) + "\" \"" + _this.field.path + "\""));
        }
        return method(payload, function(err, result) {
          if (result == null) {
            result = {};
          }
          return setTimeout((function() {
            if (err != null) {
              return next(err);
            }
            payload.model.reset(result, _this.field.path);
            payload.model._memos.replaceHash(currentHash, _this._payloadHash(payload));
            return next();
          }), 0);
        });
      });
    };

    /*
    */


    Transport.prototype._payloadHash = function(payload) {
      var hash;

      hash = {
        method: payload.method,
        path: this.field.path
      };
      return hashObject(hash);
    };

    /*
    */


    Transport.test = function(field) {
      return !!field.options.request;
    };

    return Transport;

  })(require("./base"));

  module.exports = Transport;

}).call(this);
