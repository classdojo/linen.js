// Generated by CoffeeScript 1.6.2
(function() {
  var Transport, dref, hashObject,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  hashObject = require("../memoize/hashObject");

  dref = require("dref");

  Transport = (function(_super) {
    __extends(Transport, _super);

    /*
    */


    function Transport() {
      Transport.__super__.constructor.apply(this, arguments);
      this._request = this.field.options.request;
      this._memoOps = {
        maxAge: 1000 * 10
      };
    }

    /*
    */


    Transport.prototype.watching = function(options) {
      return this.request(options, function() {});
    };

    /*
    */


    Transport.prototype.request = function(options, next) {
      var currentHash, model, payload,
        _this = this;

      payload = this._getPayload(options);
      model = payload.model;
      return options.model._memos.call(currentHash = this._payloadHash(options), this._memoOps, next, function(next) {
        var method;

        method = _this._request[payload.method];
        if (!method) {
          return next(new Error("cannot \"" + (payload.method.toUpperCase()) + "\" \"" + _this.field.path + "\""));
        }
        return method(payload, function(err, result) {
          if (result == null) {
            result = {};
          }
          return setTimeout((function() {
            var cache;

            if (err != null) {
              return next(err);
            }
            options.model.reset(result, _this.field.path);
            cache = {};
            if (_this.field.parent) {
              dref.set(cache, _this.field.path, result);
            } else {
              cache = result;
            }
            model._cache.store(cache);
            options.model._memos.replaceHash(currentHash, _this._payloadHash(payload));
            return next();
          }), 0);
        });
      });
    };

    /*
    */


    Transport.prototype._getPayload = function(options) {
      var payload;

      payload = {
        model: options.model,
        method: this._getMethod(options)
      };
      if (/post|put/.test(payload.method)) {
        payload.data = this._getPayloadData(payload, payload.method !== "post");
        if (payload.data) {
          delete payload.data._id;
        }
      }
      return payload;
    };

    /*
    */


    Transport.prototype._getPayloadData = function(payload, pluck) {
      var d, dataFields, field, model, newData, _i, _len;

      if (pluck == null) {
        pluck = true;
      }
      model = payload.model;
      dataFields = this._getDataFields(this.field);
      d = {};
      if (this.field.parent) {
        dref.set(d, this.field.path, this.field._mapper.normalize(model, model.get(this.field.path)));
      }
      for (_i = 0, _len = dataFields.length; _i < _len; _i++) {
        field = dataFields[_i];
        newData = field._mapper.normalize(model, model.get(field.path));
        dref.set(d, field.path, newData);
      }
      if (pluck) {
        d = model._cache.pluck(d, true);
      }
      if (d && this.field.parent) {
        d = dref.get(d, this.field.path) || {};
      }
      return d != null ? d : {};
    };

    /*
    */


    Transport.prototype._getMethod = function(options) {
      if (options.method === "get") {
        return "get";
      }
      if (options.method === "set") {
        if (options.model.get("_id")) {
          return "put";
        } else {
          return "post";
        }
      }
      return options.method;
    };

    /*
    */


    Transport.prototype._getDataFields = function(startField) {
      var field, paths, _i, _len, _ref;

      paths = [];
      _ref = startField.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (field.options.request) {
          continue;
        }
        paths.push(field);
        paths = paths.concat(this._getDataFields(field));
      }
      return paths;
    };

    /*
    */


    Transport.prototype._payloadHash = function(payload) {
      var hash;

      hash = {
        method: payload.method,
        path: this.field.path
      };
      return hashObject(hash);
    };

    /*
    */


    Transport.test = function(field) {
      return !!field.options.request;
    };

    return Transport;

  })(require("./base"));

  module.exports = Transport;

}).call(this);
