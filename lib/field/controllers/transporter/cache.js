// Generated by CoffeeScript 1.6.2
(function() {
  var Cache, flattenObject, unflattenObject;

  flattenObject = require("./utils/flattenObject");

  unflattenObject = require("./utils/unflattenObject");

  Cache = (function() {
    /*
    */
    function Cache(model, _prepData) {
      this.model = model;
      this._prepData = _prepData;
      this._data = {};
    }

    /*
     this is more of an optimization - primes the 
     caches before persisting - only necessary if the model
     is being fetched a remote service
    */


    Cache.prototype.prepare = function() {
      if (this._prepared) {
        return;
      }
      this._prepared = true;
      return this.store(JSON.parse(JSON.stringify(this._prepData)));
    };

    /*
    */


    Cache.prototype.clear = function() {
      this._data = {};
      return this;
    };

    /*
    */


    Cache.prototype.store = function(data) {
      var key, newData;

      newData = flattenObject({
        v: data
      }, [], {});
      for (key in newData) {
        this._data[key] = newData[key];
      }
      return this;
    };

    /*
    */


    Cache.prototype.pluck = function(data, store) {
      var changed, changedData, compData, key, _ref;

      compData = flattenObject({
        v: data
      }, [], {});
      changedData = {};
      for (key in compData) {
        if (this._data[key] === compData[key]) {
          continue;
        }
        changedData[key] = compData[key];
      }
      changed = (_ref = unflattenObject(changedData)) != null ? _ref.v : void 0;
      if (store) {
        this.store(changed);
      }
      return changed;
    };

    return Cache;

  })();

  module.exports = Cache;

}).call(this);
