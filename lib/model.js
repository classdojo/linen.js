// Generated by CoffeeScript 1.6.2
(function() {
  var Model, Payload, bindable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  Payload = require("./payload");

  Model = (function(_super) {
    __extends(Model, _super);

    /*
    */


    Model.prototype.__isModel = true;

    /*
    */


    function Model(schema, data) {
      this.schema = schema;
      if (data == null) {
        data = {};
      }
      Model.__super__.constructor.call(this, data);
      this._changed = !data._id ? Object.keys(this._clone(data)) : [];
    }

    /*
    */


    Model.prototype.isNew = function() {
      return !this.has("_id");
    };

    /*
    */


    Model.prototype.changed = function() {
      return !!this._changed.length;
    };

    /*
    */


    Model.prototype.changedKeys = function() {
      return this._changed;
    };

    /*
    */


    Model.prototype.flushChangedKeys = function() {
      var ch;

      ch = this._changed;
      this._changed = [];
      return ch;
    };

    /*
    */


    Model.prototype._set = function(key, value) {
      if (!~this._changed.indexOf(key)) {
        this._changed.push(key);
      }
      return Model.__super__._set.call(this, key, value);
    };

    /*
    */


    Model.prototype.save = function(next) {
      if (next == null) {
        next = function() {};
      }
      return this.schema.save(new Payload(this), next);
    };

    /*
    */


    Model.prototype.bind = function(property) {
      var binding;

      binding = this.bind.apply(this, arguments);
      this._fetch(property);
      return binding;
    };

    /*
    */


    Model.prototype.validate = function(next) {
      var error;

      error = this.schema.validate(this);
      if (arguments.length === 1) {
        return next(error);
      } else {
        return error;
      }
    };

    /*
    */


    Model.prototype._clone = function(data) {
      return JSON.parse(JSON.stringify(data));
    };

    /*
     refreshes the model
    */


    Model.prototype.fetch = function() {
      return this.schema.fetch(this);
    };

    /*
    */


    Model.prototype._fetch = function(property) {
      return this.schema.fetch(this, [property]);
    };

    return Model;

  })(bindable.Object);

  module.exports = Model;

}).call(this);
