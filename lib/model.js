// Generated by CoffeeScript 1.6.2
(function() {
  var ChangeWatcher, MemoDictionary, Model, bindable, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  type = require("type-component");

  ChangeWatcher = require("./changeWatcher");

  MemoDictionary = require("./memoize/dictionary");

  Model = (function(_super) {
    __extends(Model, _super);

    /*
    */


    Model.prototype.__isModel = true;

    /*
    */


    function Model(schema, data) {
      this.schema = schema;
      if (data == null) {
        data = {};
      }
      Model.__super__.constructor.call(this);
      this._memoizer = new MemoDictionary();
      this._changeWatcher = new ChangeWatcher(this);
      this.reset(data);
    }

    /*
    */


    Model.prototype.reset = function(data) {
      return this.schema.reset(this, data);
    };

    /*
    */


    Model.prototype._watching = function(property) {
      return this.schema.loadField(this, property, function() {});
    };

    /*
     returns TRUE if the _id is not present
    */


    Model.prototype.isNew = function() {
      return this.schema.isNew(this);
    };

    /*
     validates whether the model is valid
    */


    Model.prototype.validate = function(next) {
      if (next == null) {
        next = function() {};
      }
      return this.schema.validate(this, next);
    };

    /*
     reloads the model from the server
    */


    Model.prototype.load = function(next) {
      return this.schema.load(this, next);
    };

    /*
    */


    Model.prototype.loadField = function(fieldName, next) {
      return this.schema.loadField(this, fieldName, next);
    };

    /*
    */


    Model.prototype.loadAllFields = function(next) {
      return this.schema.loadAll(this, next);
    };

    /*
    */


    Model.prototype.save = function(next) {
      return this.schema.save(this, next);
    };

    /*
    */


    Model.prototype.remove = function(next) {
      return this.schema.remove(this, next);
    };

    /*
    */


    Model.prototype.toJSON = function() {
      return this.schema.toJSON(this);
    };

    return Model;

  })(bindable.Object);

  module.exports = Model;

}).call(this);
