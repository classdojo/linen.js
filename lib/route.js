// Generated by CoffeeScript 1.6.2
(function() {
  var Route, path, toarray, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  toarray = require("toarray");

  path = require("path");

  module.exports = Route = (function() {
    /*
    */
    function Route(options, parent, name) {
      var property, route, _i, _len, _ref;

      this.options = options;
      this.parent = parent != null ? parent : null;
      if (name == null) {
        name = "";
      }
      this.root = (parent != null ? parent.root : void 0) || parent || this;
      this.ref = options.ref;
      this.schemaName = options.schema;
      this._path = options.path || name;
      this.name = name;
      this._routes = {};
      for (route in options.routes) {
        this._routes[route] = new Route(options.routes[route], this, route);
      }
      _ref = ["mapRequestOptions", "mapResponse", "mapCollection", "mapItem", "mapItemPath", "mapCollectionPath"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        this._addMethod(property);
      }
    }

    /*
    */


    Route.prototype.route = function(path) {
      var current, part, pathParts, _i, _len;

      if (path == null) {
        path = "";
      }
      pathParts = path.split(".");
      current = this;
      for (_i = 0, _len = pathParts.length; _i < _len; _i++) {
        part = pathParts[_i];
        if (!current) {
          throw new Error("canot find route for " + path);
        }
        current = current._routes[part];
      }
      return current;
    };

    /*
    */


    Route.prototype.request = function(options, next) {};

    /*
    */


    Route.prototype.path = function(options) {
      var item, pathParts, ref, _ref;

      pathParts = [((_ref = this.parent) != null ? _ref.path(options) : void 0) || ""];
      if (this.ref) {
        ref = this.root.route(this.ref);
      }
      item = options[this.schemaName || (ref != null ? ref.schemaName : void 0)];
      if (ref && item) {
        return ref.path(options);
      }
      if (item) {
        pathParts.push(this._option("mapItemPath").call(this, item));
      } else {
        pathParts.push(this._option("mapCollectionPath").call(this, item));
      }
      return path.normalize(pathParts.join("/"));
    };

    /*
    */


    Route.prototype._option = function(property) {
      var _ref;

      return this.options[property] || ((_ref = this.parent) != null ? _ref._option(property) : void 0);
    };

    /*
    */


    Route.prototype._addMethod = function(property) {
      return this[property] = function() {
        return this._option(property).apply(this, arguments);
      };
    };

    return Route;

  })();

  module.exports = (function(_super) {
    __extends(_Class, _super);

    /*
    */


    function _Class(options) {
      if (options == null) {
        options = {};
      }
      this._defaultRouteItem = __bind(this._defaultRouteItem, this);
      this._defaultRouteCollection = __bind(this._defaultRouteCollection, this);
      this._defaultRouteResponse = __bind(this._defaultRouteResponse, this);
      _.defaults(options, {
        mapRequestOptions: this._defaultRouteRequestOptions,
        mapResponse: this._defaultRouteResponse,
        mapCollection: this._defaultRouteCollection,
        mapItem: this._defaultRouteItem,
        mapItemPath: this._mapDefaultItemPath,
        mapCollectionPath: this._mapDefaultCollectionPath
      });
      _Class.__super__.constructor.call(this, options);
    }

    /*
    */


    _Class.prototype._defaultRouteResponse = function(response, next) {
      if (response.error) {
        return next(response.error);
      }
      return next(null, response.result || response);
    };

    /*
    */


    _Class.prototype._defaultRouteCollection = function(result) {
      return toarray(result);
    };

    /*
    */


    _Class.prototype._defaultRouteItem = function(result) {
      return toarray(result).shift();
    };

    /*
    */


    _Class.prototype._mapDefaultItemPath = function(item) {
      return [this._path, item].join("/");
    };

    /*
    */


    _Class.prototype._mapDefaultCollectionPath = function() {
      return this._path;
    };

    return _Class;

  })(Route);

}).call(this);
