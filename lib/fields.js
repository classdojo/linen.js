// Generated by CoffeeScript 1.6.2
(function() {
  var Fields, async, dref;

  async = require("async");

  dref = require("dref");

  Fields = (function() {
    /*
    */
    function Fields(schema) {
      this.schema = schema;
      this._fields = {};
    }

    /*
    */


    Fields.prototype.add = function(field) {
      return this._fields[field.property] = field;
    };

    /*
    */


    Fields.prototype.get = function(name) {
      return this._fields[name];
    };

    /*
    */


    Fields.prototype.names = function() {
      return Object.keys(this._fields);
    };

    /*
    */


    Fields.prototype.toArray = function() {
      var fieldName, fields;

      fields = [];
      for (fieldName in this._fields) {
        fields.push(this.get(fieldName));
      }
      return fields;
    };

    /*
    */


    Fields.prototype.validate = function(model) {
      var err, errors, fieldName;

      errors = [];
      for (fieldName in this._fields) {
        err = this._fields[fieldName].validate(model);
        if (err) {
          errors.push(err);
        }
      }
      return errors.shift();
    };

    /*
    */


    Fields.prototype["default"] = function(data, model) {
      var d, field, fieldName, v;

      d = JSON.parse(JSON.stringify(data));
      for (fieldName in this._fields) {
        field = this._fields[fieldName];
        v = field["default"](dref.get(data, fieldName));
        if (v != null) {
          dref.set(d, fieldName, v);
          if (field.options.ref) {
            v.owner = model;
          }
        }
      }
      return d;
    };

    /*
    */


    Fields.prototype.map = function(model, key, value) {
      var field;

      if (!(field = this.get(key))) {
        return value;
      }
      return field.map(model, value);
    };

    /*
    */


    Fields.prototype.fetch = function(payload, next) {
      var _this = this;

      return async.each(this.names(), (function(fieldName, next) {
        var field;

        field = _this.get(fieldName);
        return field.fetch(payload, next);
      }), next);
    };

    return Fields;

  })();

  module.exports = Fields;

}).call(this);
